include:
  - '/opt/unetlab/libs/.scripts_get_ip.yaml'
  - '/opt/unetlab/libs/.scripts_ping_ip.yaml'

ios_have_ip:
  id: 1
  title: "Настройка адресa Cisco IOS"
  description: "Интерфейсу eth0/0 должен быть назначен IP адрес"
  before_script:
    - !reference [ .scripts_get_ip all ]
  script:
    - echo "[IOS] Подключение..."
    - IOS_ip0=$(getRouterIp IOS eth0/0)
    - echo "[IOS] Получен ip0:$IOS_ip0"
    - |
      # Проверка установки IP
      declare -A ipCheck=(
        ["IOS, eth0/0"]=$IOS_ip0
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done

vyos_have_ip:
  id: 2
  title: "Настройка адресa VyOS"
  description: "Интерфейсу eth1 должен быть назначен IP адрес"
  before_script:
    - !reference [ .scripts_get_ip all ]
  script:
    - echo "[VyOS] Подключение..."
    - VyOS_ip=$(getVyosIp VyOS eth1)
    - echo "[VyOS] Получен ip:$VyOS_ip"
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["VyOS eth1"]=$VyOS_ip
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done

      echo "Тест пройден успешно!"

pc_have_ip:
  id: 3
  title: "Настройка адресов PC"
  description: "Интерфейсам PC должны быть назначены IP адреса"
  before_script:
    - !reference [ .scripts_get_ip all ]
  script:
    - echo "[PC-1] Подключение..."
    - PC_1_ip=$(getLinuxIp PC-1 eth1)
    - echo "[PC-1] Получен ip:$PC_1_ip"
    - echo "[PC-2] Подключение..."
    - PC_2_ip=$(getLinuxIp PC-2 eth1)
    - echo "[PC-2] Получен ip:$PC_2_ip"
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["PC-1, eth1"]=$PC_1_ip
        ["PC-2, eth1"]=$PC_2_ip
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done

      echo "Тест пройден успешно!"

ping:
  id: 4
  title: "Проверка связности устройств"
  description: "Все узлы должны пинговать друг друга"
  before_script:
    - !reference [ .scripts_get_ip all ]
    - !reference [ .scripts_ping_ip all ]
    - |
      function checkPing(){
        local title=$1
        local command=$2
        echo "$title Проверка видимости..."
        [[ $($command) != 1 ]] && { echo "$title: ERROR"; exit 1; } || echo "$title: OK"
      }
  script:
    - PC_1_ip=$(getLinuxIp PC-1 eth1)
    - PC_2_ip=$(getLinuxIp PC-2 eth1)
    - IOS_ip0=$(getRouterIp IOS eth0/0)
    - VyOS_ip=$(getVyosIp VyOS eth1)
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["PC-1, eth1"]=$PC_1_ip
        ["PC-2, eth1"]=$PC_2_ip
        ["IOS, eth0/0"]=$IOS_ip0
        ["VyOS eth1"]=$VyOS_ip
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done
    - |
      TELNET_TIMEOUT=7
      checkPing "[PC-1]->[IOS:eth0/0]" "pingLinuxIp PC-1 $IOS_ip0"
      checkPing "[IOS]->[PC-1]" "pingIolIp IOS $PC_1_ip"
      checkPing "[PC-2]->[VyOS:eth1]" "pingLinuxIp PC-2 $VyOS_ip"
      checkPing "[VyOS]->[PC-2]" "pingVyosIp VyOS $PC_2_ip"
      echo "Тест пройден успешно!"
      