include:
  - '/opt/unetlab/libs/.all_node_active.yaml'
  - '/opt/unetlab/libs/.scripts_get_ip.yaml'
  - '/opt/unetlab/libs/.scripts_ping_ip.yaml'
  - '/opt/unetlab/libs/.check_ping.yaml'
  - '/opt/unetlab/libs/.ios_config.yaml'

all_node_active:
  extends: .all_node_active
  id: 1
  before_script:
    - allNodeId=("R1" "R2" "R3" "PC1" "PC2" "PC3")

node_have_ip:
  id: 2
  title: "Настройка адресов устройств"
  description: "Интерфейсам должны быть назначены IP адреса"
  before_script:
    - !reference [ .scripts_get_ip all ]
  script:
    - echo "[R1] Подключение..."
    - R1_e00=$(getRouterIp R1 eth0/0)
    - echo "[R1] Получен eth0/0 = $R1_e00"
    - R1_e01=$(getRouterIp R1 eth0/1)
    - echo "[R1] Получен eth0/1 = $R1_e01"
    - R1_e02=$(getRouterIp R1 eth0/2)
    - echo "[R1] Получен eth0/2 = $R1_e02"

    - echo "[R2] Подключение..."
    - R2_e00=$(getRouterIp R2 eth0/0)
    - echo "[R2] Получен eth0/0 = $R2_e00"
    - R2_e01=$(getRouterIp R2 eth0/1)
    - echo "[R2] Получен eth0/1 = $R2_e01"
    - R2_e02=$(getRouterIp R2 eth0/2)
    - echo "[R2] Получен eth0/2 = $R2_e02"
    - R2_lo1=$(getRouterIp R2 lo1)
    - echo "[R2] Получен lo1 = $R2_lo1"

    - echo "[R3] Подключение..."
    - R3_e00=$(getRouterIp R3 eth0/0)
    - echo "[R3] Получен eth0/0 = $R3_e00"
    - R3_e01=$(getRouterIp R3 eth0/1)
    - echo "[R3] Получен eth0/1 = $R3_e01"
    - R3_e02=$(getRouterIp R3 eth0/2)
    - echo "[R3] Получен eth0/2 = $R3_e02"

    - echo "[PC1] Подключение..."
    - PC1_eth1=$(getLinuxIp PC1 eth1)
    - echo "[PC1] Получен eth1 = $PC1_eth1"

    - echo "[PC2] Подключение..."
    - PC2_eth1=$(getLinuxIp PC2 eth1)
    - echo "[PC2] Получен eth1 = $PC2_eth1"

    - echo "[PC3] Подключение..."
    - PC3_eth1=$(getLinuxIp PC3 eth1)
    - echo "[PC3] Получен eth1 = $PC3_eth1"
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["R1, eth0/0"]=$R1_e00
        ["R1, eth0/1"]=$R1_e01
        ["R1, eth0/2"]=$R1_e02
        ["R2, eth0/0"]=$R2_e00
        ["R2, eth0/1"]=$R2_e01
        ["R2, eth0/2"]=$R2_e02
        ["R2, lo1"]=$R2_lo1
        ["R3, eth0/0"]=$R3_e00
        ["R3, eth0/1"]=$R3_e01
        ["R3, eth0/2"]=$R3_e02
        ["PC1, eth1"]=$PC1_eth1
        ["PC2, eth1"]=$PC2_eth1
        ["PC3, eth1"]=$PC3_eth1
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done

ping_all:
  id: 3
  title: "Проверка связности PC"
  description: "Узлы должны пинговать друг друга"
  before_script:
    - !reference [ .scripts_get_ip all ]
    - !reference [ .scripts_ping_ip all ]
    - !reference [ .check_ping ]
  script:
    - PC1_eth1=$(getLinuxIp PC1 eth1)
    - PC2_eth1=$(getLinuxIp PC2 eth1)
    - PC3_eth1=$(getLinuxIp PC3 eth1)
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["PC1, eth1"]=$PC1_eth1
        ["PC2, eth1"]=$PC2_eth1
        ["PC3, eth1"]=$PC3_eth1
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done
    - |
      TELNET_TIMEOUT=7
      checkPing "[PC1]->[PC2]" "pingLinuxIp PC1 $PC2_eth1"
      checkPing "[PC1]->[PC3]" "pingLinuxIp PC1 $PC3_eth1"
      checkPing "[PC2]->[PC1]" "pingLinuxIp PC2 $PC1_eth1"
      checkPing "[PC2]->[PC3]" "pingLinuxIp PC2 $PC3_eth1"
      checkPing "[PC3]->[PC1]" "pingLinuxIp PC3 $PC1_eth1"
      checkPing "[PC3]->[PC2]" "pingLinuxIp PC3 $PC2_eth1"

      echo "Success"

default_originate:
  id: 4
  title: "Проверка распространения маршрута по умолчанию"
  description: "R1 и R3 должны получить маршрут по умолчанию и НЕ должны получить маршрут до 8.8.8.8"
  before_script:
    - |
      function findIpOSPFRoute() {
      local node=$1
      local target_net=$2
      local command="show ip route ospf"
    - !reference [ .execute_telnet ]
    - |
      local find=$(echo "$buffer" | grep "$target_net")
      [ -z "$find" ] && echo "0" || echo "1"
      }
    - |
      function routeExists() {
      local node=$1
      local target_net=$2
      echo "[$node] Маршрут до $target_net существует..."
      result=$(findIpOSPFRoute "$node" "$target_net")
      if [ "$result" -eq 0 ]; then
          echo "[$node] Ошибка"
          exit 1
      else
          echo "[$node] OK"
      fi
      }
    - |
      function routeNotExists() {
      local node=$1
      local target_net=$2
      echo "[$node] Маршрут до $target_net не существует..."
      result=$(findIpOSPFRoute "$node" "$target_net")
      if [ "$result" -eq 1 ]; then
          echo "[$node] Ошибка"
          exit 1
      else
          echo "[$node] OK"
      fi
      }
  script:
    - routeExists R1 "0.0.0.0"
    - routeExists R3 "0.0.0.0"
    - routeNotExists R1 "8.8.8.8"
    - routeNotExists R3 "8.8.8.8"

ping_loopback:
  id: 5
  title: "Проверка связности PC и loopback"
  description: "Узлы должны пинговать loopback"
  before_script:
    - !reference [ .scripts_get_ip all ]
    - !reference [ .scripts_ping_ip all ]
    - !reference [ .check_ping ]
  script:
    - PC1_eth1=$(getLinuxIp PC1 eth1)
    - PC2_eth1=$(getLinuxIp PC2 eth1)
    - PC3_eth1=$(getLinuxIp PC3 eth1)
    - R2_lo1=$(getRouterIp R2 lo1)
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["PC1, eth1"]=$PC1_eth1
        ["PC2, eth1"]=$PC2_eth1
        ["PC3, eth1"]=$PC3_eth1
        ["R2, lo1"]=$R2_lo1
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done
    - |
      TELNET_TIMEOUT=7
      checkPing "[PC1]->[R2]" "pingLinuxIp PC1 $R2_lo1"
      checkPing "[PC2]->[R2]" "pingLinuxIp PC2 $R2_lo1"
      checkPing "[PC3]->[R2]" "pingLinuxIp PC3 $R2_lo1"

      echo "Success"

ospf_check:
  id: 6
  title: "Сценарий для проверки OSPF"
  description: "При изменении стоимости интерфейса таблица маршрутизации изменяется на всех маршрутизаторах"
  before_script:
    - !reference [ .scripts_get_ip all ]
    - !reference [ .scripts_ping_ip all ]
    - !reference [ .check_ping ]
    - !reference [ .scripts_ospf_cost all ]
    - |
      function traceroute() {
      local node=$1
      local source_ip=$2
      local target_ip=$3
      local command="traceroute $target_ip source $source_ip"
    - !reference [ .execute_telnet ]
    - |
      local trace=$(echo "$buffer" | grep sec | awk '{print $1 " " $2}')
      echo "$trace"
      }
  script:
    - R1_e01_cost=$(getOSPFCost R1 e0/1)
    - |
      if [[ -z "$R1_e01_cost" ]] ; then
        echo "Ошибка установки стоимости на R1 e0/1"; exit 1
      else
        echo "[R1] e0/1 стоимость $R1_e01_cost"
      fi

    - R1_e00=$(getRouterIp R1 eth0/0)
    - R1_e01=$(getRouterIp R1 eth0/1)
    - R1_e02=$(getRouterIp R1 eth0/2)
    - R2_e00=$(getRouterIp R2 eth0/0)
    - R2_e01=$(getRouterIp R2 eth0/1)
    - R2_e02=$(getRouterIp R2 eth0/2)
    - R3_e00=$(getRouterIp R3 eth0/0)
    - R3_e01=$(getRouterIp R3 eth0/1)
    - R3_e02=$(getRouterIp R3 eth0/2)
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["R1, eth0/0"]=$R1_e00
        ["R1, eth0/1"]=$R1_e01
        ["R1, eth0/2"]=$R1_e02
        ["R2, eth0/0"]=$R2_e00
        ["R2, eth0/1"]=$R2_e01
        ["R2, eth0/2"]=$R2_e02
        ["R3, eth0/0"]=$R3_e00
        ["R3, eth0/1"]=$R3_e01
        ["R3, eth0/2"]=$R3_e02
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done

    - |
      TELNET_TIMEOUT=10

      echo "[R1 e0/2] -> [R2 e0/2] Проверяем трассировку..."
      trace_result=$(traceroute R1 $R1_e02 $R2_e02)

      trace_correct="1 $R2_e00"

      if [[ "$trace_result" == "$trace_correct" ]]; then
          echo "$trace_result"
          echo "OK"
      else
          echo "Результат:"
          echo "$trace_result"
          echo "Ожидается:"
          echo "$trace_correct"
          echo "Ошибка"
          exit 1
      fi

      echo "[R1 e0/2] -> [R3 e0/2] Проверяем трассировку..."
      trace_result=$(traceroute R1 $R1_e02 $R3_e02)

      trace_correct="1 $R2_e00
      2 $R3_e00"

      if [[ "$trace_result" == "$trace_correct" ]]; then
          echo "$trace_result"
          echo "OK"
      else
          echo "Результат:"
          echo "$trace_result"
          echo "Ожидается:"
          echo "$trace_correct"
          echo "Ошибка"
          exit 1
      fi

      deleteOSPFCost R1 e0/1 $R1_e01_cost

      echo "[R1 e0/2] -> [R2 e0/2] Проверяем трассировку..."
      trace_result=$(traceroute R1 $R1_e02 $R2_e02)

      trace_correct="1 $R2_e00"

      if [[ "$trace_result" == "$trace_correct" ]]; then
          echo "$trace_result"
          echo "OK"
      else
          echo "Результат:"
          echo "$trace_result"
          echo "Ожидается:"
          echo "$trace_correct"
          echo "Ошибка"
          echo "Восстановление конфигурации..."
          setOSPFCost R1 e0/1 $R1_e01_cost
          exit 1
      fi

      echo "[R1 e0/2] -> [R3 e0/2] Проверяем трассировку..."
      trace_result=$(traceroute R1 $R1_e02 $R3_e02)

      trace_correct="1 $R3_e01"

      if [[ "$trace_result" == "$trace_correct" ]]; then
          echo "$trace_result"
          echo "OK"
      else
          echo "Результат:"
          echo "$trace_result"
          echo "Ожидается:"
          echo "$trace_correct"
          echo "Ошибка"
          echo "Восстановление конфигурации..."
          setOSPFCost R1 e0/1 $R1_e01_cost
          exit 1
      fi

      setOSPFCost R1 e0/0 $R1_e01_cost

      echo "[R1 e0/2] -> [R2 e0/2] Проверяем трассировку..."
      trace_result=$(traceroute R1 $R1_e02 $R2_e02)

      trace_correct="1 $R3_e01
      2 $R2_e01"

      if [[ "$trace_result" == "$trace_correct" ]]; then
          echo "$trace_result"
          echo "OK"
      else
          echo "Результат:"
          echo "$trace_result"
          echo "Ожидается:"
          echo "$trace_correct"
          echo "Ошибка"
          echo "Восстановление конфигурации..."
          deleteOSPFCost R1 e0/0 $R1_e01_cost
          setOSPFCost R1 e0/1 $R1_e01_cost
          exit 1
      fi

      echo "[R1 e0/2] -> [R3 e0/2] Проверяем трассировку..."
      trace_result=$(traceroute R1 $R1_e02 $R3_e02)

      trace_correct="1 $R3_e01"

      if [[ "$trace_result" == "$trace_correct" ]]; then
          echo "$trace_result"
          echo "OK"
      else
          echo "Результат:"
          echo "$trace_result"
          echo "Ожидается:"
          echo "$trace_correct"
          echo "Ошибка"
          echo "Восстановление конфигурации..."
          deleteOSPFCost R1 e0/0 $R1_e01_cost
          setOSPFCost R1 e0/1 $R1_e01_cost
          exit 1
      fi

      deleteOSPFCost R1 e0/0 $R1_e01_cost
      setOSPFCost R1 e0/1 $R1_e01_cost

