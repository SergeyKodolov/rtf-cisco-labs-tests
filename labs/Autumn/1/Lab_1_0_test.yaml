include:
  - '/opt/unetlab/libs/.all_node_active.yaml'
  - '/opt/unetlab/libs/.scripts_get_ip.yaml'
  - '/opt/unetlab/libs/.scripts_ping_ip.yaml'

all_node_active:
  extends: .all_node_active
  id: 1
  before_script:
    - allNodeId=("PC-A" "S1" "R1" "PC-B")

node_have_ip:
  id: 2
  title: "Настройка адресов устройств"
  description: "Интерфейсам должны быть назначены IP адреса"
  before_script:
    - !reference [ .scripts_get_ip all ]
  script:
    - echo "[PC-A] Подключение..."
    - PC_A_ip=$(getLinuxIp PC-A eth1)
    - echo "[PC-A] Получен ip:$PC_A_ip"
    - echo "[PC-B] Подключение..."
    - PC_B_ip=$(getLinuxIp PC-B eth1)
    - echo "[PC-B] Получен ip:$PC_B_ip"
    - echo "[R1] Подключение..."
    - R1_ip0=$(getRouterIp R1 eth0/0)
    - echo "[R1] Получен ip0:$R1_ip0"
    - R1_ip1=$(getRouterIp R1 eth0/1)
    - echo "[R1] Получен ip1:$R1_ip1"
    - echo "[S1] Подключение..."
    - S1_ip=$(getSwitchIp S1 vlan1)
    - echo "[S1] Получен ip:$S1_ip"
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["PC-A, eth0"]=$PC_A_ip
        ["PC-B, eth0"]=$PC_B_ip
        ["R1, eth0/0"]=$R1_ip0
        ["R1, eth0/1"]=$R1_ip1
        ["S1 vlan1"]=$S1_ip
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done

ping:
  id: 3
  title: "Проверка связности устройств"
  description: "Все узлы должны пинговать друг друга"
  before_script:
    - !reference [ .scripts_get_ip all ]
    - !reference [ .scripts_ping_ip all ]
    - |
      function checkPing(){
        local title=$1
        local command=$2
        echo "$title Проверка видимости..."
        [[ $($command) != 1 ]] && { echo "$title: ERROR"; exit 1; } || echo "$title: OK"
      }
  script:
    - PC_A_ip=$(getLinuxIp PC-A eth1)
    - PC_B_ip=$(getLinuxIp PC-B eth1)
    - R1_ip0=$(getRouterIp R1 eth0/0)
    - R1_ip1=$(getRouterIp R1 eth0/1)
    - S1_ip=$(getSwitchIp S1 vlan1)
    - |
      # Проверка установки всех IP адресов
      declare -A ipCheck=(
        ["PC-A, eth0"]=$PC_A_ip
        ["PC-B, eth0"]=$PC_B_ip
        ["R1, eth0/0"]=$R1_ip0
        ["R1, eth0/1"]=$R1_ip1
        ["S1 vlan1"]=$S1_ip
      )
      for key in "${!ipCheck[@]}"; do
        value="${ipCheck[$key]}"
        if [[ -z "$value" ]] ; then
          echo "Ошибка установки ip адреса на $key"; exit 1
        fi
      done
    - |
      TELNET_TIMEOUT=7
      checkPing "[PC-B]->[R1:eth0/0]" "pingLinuxIp PC-B $R1_ip0"
      checkPing "[PC-B]->[R1:eth0/1]" "pingLinuxIp PC-B $R1_ip1"
      checkPing "[R1]->[PC-B]" "pingIolIp R1 $PC_B_ip"
      
      checkPing "[PC-A]->[S1]" "pingLinuxIp PC-A $S1_ip"
      checkPing "[S1]->[PC-A]" "pingIolIp S1 $PC_A_ip"
      
      checkPing "[PC-A]->[R1:eth0/0]" "pingLinuxIp PC-A $R1_ip0"
      checkPing "[PC-A]->[R1:eth0/1]" "pingLinuxIp PC-A $R1_ip1"
      checkPing "[R1]->[PC-A]" "pingIolIp R1 $PC_A_ip"
      
      checkPing "[PC-B]->[S1]" "pingLinuxIp PC-B $S1_ip"
      checkPing "[S1]->[PC-B]" "pingIolIp S1 $PC_B_ip"
      
      checkPing "[PC-A]->[PC-B]" "pingLinuxIp PC-A $PC_B_ip"
      checkPing "[PC-B]->[PC-A]" "pingLinuxIp PC-B $PC_A_ip"
      echo "Success"
      